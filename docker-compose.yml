# docker-compose.yml
version: '3.8'

volumes:
  project_database_vol:
  statisticsdb_vol:

networks:
  default:
    external: true
    name: micro_network
  micro_network:
    external:
      name: micro_network

services:
  project-api:
    container_name: cproject-backend-service
    build:
      context: ../backend-service
    ports:
      - "5005:5005"
    depends_on:
      - project-database
    networks:
      - micro_network
    restart: always

  project-database:
    container_name: cproject-backend-dbase
    image: mysql:8
    ports:
      - "32005:3306"
    depends_on:
      - rabbitmq
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: project-db-prod
      MYSQL_USER: projectmanager
      MYSQL_PASSWORD: project_manager
    networks:
      - micro_network
    volumes:
      - project_database_vol:/var/lib/mysql


  frontend-app:
    container_name: cfrontend-app
    build:
      context: ../client
    volumes:
      - '..:/client'
      - '..:/client/node_modules'
    ports:
      - "3000:3000"
    networks:
      - micro_network
    environment:
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - stats-api
      - project-api
    restart: always

  queue:
    build:
      context: ../statistics-service
    command: [ 'consumer.py' ]
    depends_on:
      - stats-api
      - project-api
      - rabbitmq

  stats-api:
    container_name: cstatistics-service
    build:
      context: ../statistics-service
    ports:
      - "5006:5006"
    depends_on:
      - stats-db
    networks:
      - micro_network
    environment:
      PYTHONUNBUFFERED: 1
    restart: always


  stats-db:
    container_name: cstatistics_dbase
    image: postgres:13-alpine
    ports:
      - "32006:5432"
    environment:
      POSTGRES_USER: projectmanager
      POSTGRES_PASSWORD: project_manager
      POSTGRES_DB: statistics-prod
      POSTGRES_ROOT_PASSWORD: root
      PYTHONUNBUFFERED: 1
    depends_on:
      - rabbitmq
    networks:
      - micro_network
    volumes:
      - statisticsdb_vol:/var/lib/postgresql/data/

  rabbitmq:
    image: 'rabbitmq:3.6-management-alpine'
    hostname: 'rabbitmq'
    ports:
      - '5672:5672'
      - '15672:15672'
    networks:
      - micro_network

  kong:
    container_name: ckong-api-gateway
    image: kong:latest
    ports:
      - "8000:8000"
      - "8443:8443"
      - "0.0.0.0:8001:8001"
      - "0.0.0.0:8444:8444"
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/usr/local/kong/declarative/kong.yml
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl
    networks:
      - micro_network
    volumes:
      - ./kong.yml:/usr/local/kong/declarative/kong.yml